//
//  HomePresenter.swift
//  LodjinhaSZ
//
//  Created by Tiago Chaves on 02/06/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
	func presentBanners(response: Home.GetBannerList.Response)
	func presentCategories(response: Home.GetCategoryList.Response)
}

class HomePresenter: HomePresentationLogic {
	
	weak var viewController: HomeDisplayLogic?
	
	// MARK: Get Banners
	
	func presentBanners(response: Home.GetBannerList.Response) {
		
		var viewModel:Home.GetBannerList.ViewModel
		
		if response.error == nil, let banners = response.banners {
			
			let bannersViewModel = getViewModel(ofBanners: banners)
			viewModel = Home.GetBannerList.ViewModel(banners: bannersViewModel, error: nil)
		}else{
			
			viewModel = Home.GetBannerList.ViewModel(banners: nil, error: response.error)
		}
		
		self.viewController?.displayBanners(viewModel: viewModel)
	}
	
	private func getViewModel(ofBanners banners:BannerList) -> [BannerViewModel] {
		
		var viewModelBanners:[BannerViewModel] = []
		
		for banner in banners.data ?? [] {
			
			let viewModelBanner = BannerViewModel(bannerImageUrl: banner.imageUrl, bannerLink: banner.urlLink)
			viewModelBanners.append(viewModelBanner)
		}
		
		return viewModelBanners
	}
	
	// MARK: Get Categories
	
	func presentCategories(response: Home.GetCategoryList.Response) {
		
		var viewModel:Home.GetCategoryList.ViewModel
		
		if response.error == nil, let categories = response.categories {
			
			let categoriesViewModel = getViewModel(ofCategories: categories)
			viewModel = Home.GetCategoryList.ViewModel(categories: categoriesViewModel, error: nil)
		}else{
			
			viewModel = Home.GetCategoryList.ViewModel(categories: nil, error: response.error)
		}
		
		viewController?.displayCategories(viewModel: viewModel)
	}
	
	private func getViewModel(ofCategories categories:CategoryList) -> [CategoryViewModel] {
		
		var viewModelCategories:[CategoryViewModel] = []
		
		for category in categories.data ?? [] {
			
			let viewModelCategory = CategoryViewModel(id: category.id, desc: category.desc, categoryImageUrl: category.imageUrl)
			viewModelCategories.append(viewModelCategory)
		}
		
		return viewModelCategories
	}
}
