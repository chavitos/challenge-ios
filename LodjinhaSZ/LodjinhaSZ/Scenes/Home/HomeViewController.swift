//
//  HomeViewController.swift
//  LodjinhaSZ
//
//  Created by Tiago Chaves on 02/06/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class {
	func displayBanners(viewModel: Home.GetBannerList.ViewModel)
	func displayCategories(viewModel: Home.GetCategoryList.ViewModel)
	func displayPopProducts(viewModel: Home.GetPopProductList.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic {
	
	var interactor: HomeBusinessLogic?
	var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		
		let viewController = self
		let interactor = HomeInteractor()
		let presenter = HomePresenter()
		let router = HomeRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		let navImage = UIImage(named: "logoNavbar")
		let navImageView = UIImageView(image: navImage)
		self.navigationItem.titleView = navImageView
		
		getBanners()
		getCategories()
		getPopProducts()
	}
	
	// MARK: GetBanners
	
	@IBOutlet weak var bannerPageControl: UIPageControl!
	@IBOutlet weak var bannerScrollView: BannerScrollView!
	
	func getBanners() {
		
		let request = Home.GetBannerList.Request()
		interactor?.getBanners(request: request)
	}
	
	func displayBanners(viewModel: Home.GetBannerList.ViewModel) {
		
		bannerPageControl.numberOfPages = viewModel.banners?.count ?? 0
		bannerScrollView.configBanners(viewModel.banners ?? [])
	}
	
	// MARK: Get Categories
	
	@IBOutlet weak var categoryCollection: UICollectionView!
	
	let categoryCellIdentifier = "categoryCell"
	var categories:[CategoryViewModel] = []
	
	func getCategories() {
		
		let request = Home.GetCategoryList.Request()
		interactor?.getCategories(request: request)
	}
	
	func displayCategories(viewModel: Home.GetCategoryList.ViewModel) {
		
		if viewModel.error == nil, let categories = viewModel.categories {
			self.categories = categories
			
			DispatchQueue.main.async {
				self.categoryCollection.reloadData()
			}
		}else{
			
			#warning("Tratar erro com alert!")
		}
	}
	
	// MARK: Get Pop Products
	
	@IBOutlet weak var productTableView: UITableView!
	
	let productCellIdentifier = "productCell"
	var popProducts:[ProductViewModel] = []
	
	func getPopProducts() {
		
		let request = Home.GetPopProductList.Request()
		interactor?.getPopProducts(request: request)
	}
	
	func displayPopProducts(viewModel: Home.GetPopProductList.ViewModel) {
		
		if viewModel.error == nil, let popProducts = viewModel.popProducts {
			self.popProducts = popProducts
			
			DispatchQueue.main.async {
				self.productTableView.reloadData()
			}
		}else{
			
			#warning("Tratar erro com alert!")
		}
	}
}

extension HomeViewController:UIScrollViewDelegate {
	
	func scrollViewDidEndDecelerating(_ scrollView: UIScrollView) {
		
		let page = scrollView.contentOffset.x / scrollView.frame.size.width
		bannerPageControl.currentPage = Int(page)
	}
}

extension HomeViewController:UITableViewDelegate, UITableViewDataSource {
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		
		return popProducts.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		
		let product = popProducts[indexPath.row]
		
		if let cell = tableView.dequeueReusableCell(withIdentifier: productCellIdentifier, for: indexPath) as? ProductTableViewCell {
			
			cell.configCell(withProduct: product)
			
			return cell
		}
		
		return UITableViewCell()
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		
		
	}
}

extension HomeViewController:UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
	
	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		
		return categories.count
	}
	
	func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
		
		let height = collectionView.frame.size.height - 16
		let width = (height / 5.0) * 4
		
		return CGSize(width: width, height: height)
	}
	
	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		
		let category = categories[indexPath.row]
		
		if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: categoryCellIdentifier, for: indexPath) as? CategoryCollectionViewCell {
			
			cell.configCell(withCategory: category)
			
			return cell
		}
		
		return UICollectionViewCell()
	}
}
