//
//  HomeInteractor.swift
//  LodjinhaSZ
//
//  Created by Tiago Chaves on 02/06/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
	
	func getBanners(request: Home.GetBannerList.Request)
	func getCategories(request: Home.GetCategoryList.Request)
	func getPopProducts(request: Home.GetPopProductList.Request)
}

protocol HomeDataStore {
	
	//var name: String { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
	
	var presenter			: HomePresentationLogic?
	var worker				: HomeWorker?
	let bannerWorker		: BannerListNetworkWorker = BannerListNetworkWorker()
	let categoryWorker 		: CategoryListNetworkWorker = CategoryListNetworkWorker()
	let popProductsWorker	: PopProductListNetworkWorker = PopProductListNetworkWorker()
	//var name: String = ""
	
	// MARK: Get Banners
	
	func getBanners(request: Home.GetBannerList.Request) {

		worker = HomeWorker(bannerWorker, nil, nil)
		worker?.getBanners(completion: { (banners, error) in
			
			let response:Home.GetBannerList.Response
			
			if error == nil, let banners = banners {
				
				response = Home.GetBannerList.Response(banners: banners,error: nil)
			}else {
				
				response = Home.GetBannerList.Response(banners: nil, error: error)
			}
			
			self.presenter?.presentBanners(response: response)
		})
	}
	
	func getCategories(request: Home.GetCategoryList.Request) {
		
		worker = HomeWorker(nil, categoryWorker, nil)
		worker?.getCategories(completion: { (categories, error) in
			
			let response:Home.GetCategoryList.Response
			
			if error == nil, let categories = categories {
				
				response = Home.GetCategoryList.Response(categories: categories,error: nil)
			}else {
				
				response = Home.GetCategoryList.Response(categories: nil, error: error)
			}
			
			self.presenter?.presentCategories(response: response)
		})
	}
	
	func getPopProducts(request: Home.GetPopProductList.Request) {
		
		worker = HomeWorker(nil,nil, popProductsWorker)
		worker?.getPopProducts(completion: { (popProducts, error) in
			
			let response:Home.GetPopProductList.Response
			
			if error == nil, let popProducts = popProducts {
				
				response = Home.GetPopProductList.Response(popProducts: popProducts, error: nil)
			}else{
				response = Home.GetPopProductList.Response(popProducts: nil, error: error)
			}
			
			self.presenter?.presentPopProducts(response: response)
		})
	}
}
