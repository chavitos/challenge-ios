//
//  CategoryProductsPresenter.swift
//  LodjinhaSZ
//
//  Created by Tiago Chaves on 05/06/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CategoryProductsPresentationLogic {
	func presentCategoryProducts(response: CategoryProducts.GetCategoryProducts.Response)
	func presentCategoryName(response: CategoryProducts.GetCategoryName.Response)
	func presentProductDetail(response: CategoryProducts.ShowProductDetail.Response)
}

class CategoryProductsPresenter: CategoryProductsPresentationLogic {
	
	weak var viewController: CategoryProductsDisplayLogic?
	
	// MARK: Get Category Name
	
	func presentCategoryName(response: CategoryProducts.GetCategoryName.Response) {
		
		let viewModel = CategoryProducts.GetCategoryName.ViewModel(categoryName: response.categoryName)
		viewController?.displayCategoryName(viewModel: viewModel)
	}
	
	// MARK: Get Category's Products
	
	func presentCategoryProducts(response: CategoryProducts.GetCategoryProducts.Response) {
		
		var viewModel:CategoryProducts.GetCategoryProducts.ViewModel
		
		if response.error == nil, let products = response.products {
			
			let productsViewModel = getViewModel(ofPopProducts: products)
			viewModel = CategoryProducts.GetCategoryProducts.ViewModel(products: productsViewModel,
																		 offset: response.products?.offset,
																		 total: response.products?.total,
																		 error: nil)
		}else{
			
			viewModel = CategoryProducts.GetCategoryProducts.ViewModel(products: nil, offset: nil, total: nil, error: response.error)
		}
		
		viewController?.displayProducts(viewModel: viewModel)
	}
	
	private func getViewModel(ofPopProducts popProducts:ProductList) -> [ProductViewModel] {
		
		var viewModelPopProducts:[ProductViewModel] = []
		
		DispatchQueue.global(qos: .utility).sync {
			
			for product in popProducts.data ?? [] {
				
				let currencyFormatter    = NumberFormatter().getCurrencyFormatter()
				let originalPrice = currencyFormatter.string(from: NSNumber(value: product.originalPrice ?? 0.00))
				let price = currencyFormatter.string(from: NSNumber(value: product.price ?? 0.00))
				
				let viewModelProduct = ProductViewModel(category: CategoryViewModel(id: product.category?.id,
																					desc: product.category?.desc,
																					categoryImageUrl: product.category?.imageUrl),
														desc: product.desc,
														id: product.id,
														name: product.name,
														originalPrice: originalPrice,
														price: price,
														imageUrl: product.imageUrl,
														isPromotion: product.isPromotion)
				
				viewModelPopProducts.append(viewModelProduct)
			}
		}
		
		return viewModelPopProducts
	}
	
	// MARK: Present Product Detail
	
	func presentProductDetail(response: CategoryProducts.ShowProductDetail.Response) {
		
		viewController?.displayProductDetail(viewModel: CategoryProducts.ShowProductDetail.ViewModel())
	}
}
