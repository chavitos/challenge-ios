//
//  NetworkManager.swift
//  LodjinhaSZ
//
//  Created by Tiago Chaves on 01/06/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by Toledo's Swift Xcode Templates
//

import Foundation
import Alamofire

public enum LodjinhaSZRequests: URLRequestConvertible {

    static let baseURLPath              = "https://alodjinha.herokuapp.com"
    static let baseURI                  = "/"
    static let completeURL              = "\(LodjinhaSZRequests.baseURLPath)\(LodjinhaSZRequests.baseURI)"

    case getBanners
	case getCategories
	case getProducts(offset:Int,limit:Int,categoryId:Int?)
	case getProduct(productId:Int)
	case getMostPopularProducts
	case reserveProduct(productId:Int)
    
    var method: HTTPMethod {
        switch self {
		case .reserveProduct:
            return .post
		default:
			return .get
        }
    }
    
    var baseURL: String{
        switch self{
        default:
            return LodjinhaSZRequests.completeURL
        }
    }
    
    var path: String {
        switch self {
        case .getBanners:
            return "banner"
		case .getCategories:
			return "categoria"
		case .getProducts:
			return "produto"
		case .getProduct(let productId):
			return "produto/\(productId)"
		case .getMostPopularProducts:
			return "produto/maisvendidos"
		case .reserveProduct(let productId):
			return "produto/\(productId)"
        }
    }
    
    var parameters: [String: Any]? {
        switch self {
        case .getProducts(let offset, let limit, let categoryId):
			
			var params:[String:Any] = ["offset":offset,"limit":limit]
			
			if let categoryId = categoryId {
				params["categoriaId"] = categoryId
			}
			
			return params
		default:
			return nil
        }
    }
    
    public func asURLRequest() throws -> URLRequest {
        
        let url = try baseURL.asURL()
        var request = URLRequest(url: url.appendingPathComponent(path))
        
        request.httpMethod = method.rawValue
        request.timeoutInterval = TimeInterval(10 * 1000)

        return try URLEncoding.default.encode(request, with: parameters)
    }
}

class NetworkManager {
    
    static func request(withURL url:URLRequestConvertible, callback:@escaping (Data?,DataResponse<Any>?,Error?)->Void) {
        
        Alamofire.request(url).validate().responseJSON { response in
            
            NSLog("Requesting: \(url.urlRequest!)")
            
            switch response.result {
            case .success:
                let data = response.data
                NSLog("Request successed!")
                callback(data,response, nil)
            case .failure(let error):
                NSLog("Request failed! \(error.localizedDescription)")
                callback(nil,response, error)
            }
        }
    }
}
