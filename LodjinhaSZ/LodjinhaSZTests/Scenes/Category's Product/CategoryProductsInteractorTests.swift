//
//  CategoryProductsInteractorTests.swift
//  LodjinhaSZ
//
//  Created by Tiago Chaves on 07/06/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import LodjinhaSZ
import XCTest

class CategoryProductsInteractorTests: XCTestCase {
	
	// MARK: Subject under test
	
	var sut: CategoryProductsInteractor!
	
	// MARK: Test lifecycle
	
	override func setUp() {
		
		super.setUp()
		setupCategoryProductsInteractor()
	}
	
	override func tearDown() {
		
		super.tearDown()
	}
	
	// MARK: Test setup
	
	func setupCategoryProductsInteractor() {
		
		sut = CategoryProductsInteractor()
	}
	
	// MARK: Test doubles
	
	class CategoryProductsPresentationLogicSpy: CategoryProductsPresentationLogic {
		
		var presentCategoryProductsCalled = false
		var presentCategoryNameCalled = false
		var presentProductDetailCalled = false
		
		var categoryName = ""
		
		func presentCategoryProducts(response: CategoryProducts.GetCategoryProducts.Response) {
			presentCategoryProductsCalled = true
		}
		
		func presentCategoryName(response: CategoryProducts.GetCategoryName.Response) {
			presentCategoryNameCalled = true
			categoryName = response.categoryName ?? ""
		}
		
		func presentProductDetail(response: CategoryProducts.ShowProductDetail.Response) {
			presentProductDetailCalled = true
		}
	}
	
	class CategoryProductsWorkerSpy: CategoryProductsWorker {
		
		var workerCalled = false
		override func getProducts(ofCategory categoryId: Int,
								  withOffset offset: Int,
								  andLimit limit: Int,
								  completion: @escaping (ProductList?, Error?) -> Void) {
			
			workerCalled = true
			completion(nil,nil)
		}
	}
	
	// MARK: Tests
	
	func testInteractorShouldAskWorkerToGetCategoryProductsAndPresenterToFormatResult() {
		
		// Given
		let presenter = CategoryProductsPresentationLogicSpy()
		sut.presenter = presenter
		let worker = CategoryProductsWorkerSpy(CategoryProductsNetworkWorker())
		sut.worker = worker
		let request = CategoryProducts.GetCategoryProducts.Request(offset: 0, limit: 0)
		
		// When
		sut.getCategoryProducts(request: request)
		
		// Then
		XCTAssertTrue(worker.workerCalled, "getCategoryProducts(request:) should ask the worker to get product list")
		XCTAssertTrue(presenter.presentCategoryProductsCalled, "getCategoryProducts(request:) should ask the presenter to format the result")
	}
	
	func testInteractorShouldSaveTheProductAndCallPresenter() {
	
		// Given
		let presenter = CategoryProductsPresentationLogicSpy()
		sut.presenter = presenter

		let product = Seeds.ViewModels.product
		
		let request = CategoryProducts.ShowProductDetail.Request(product: product)
		
		// When
		sut.storeProduct(request: request)
		
		// Then
		XCTAssertEqual(product, sut.product, "storeProduct(request:) should store the product on product variable")
		XCTAssertTrue(presenter.presentProductDetailCalled, "storeProduct(request:) should ask the presenter to present product detail")
	}
	
	func testInteractorShouldGetTheCategoryNameAndPassToPresenter() {
		
		// Given
		let presenter = CategoryProductsPresentationLogicSpy()
		sut.presenter = presenter
		
		let category = Seeds.ViewModels.category
		sut.category = category
		
		let request = CategoryProducts.GetCategoryName.Request()
		
		// When
		sut.getCategoryName(request: request)
		
		// Then
		XCTAssertEqual(category.desc, presenter.categoryName, "getCategoryName(request:) should pass the category name to presenter")
		XCTAssertTrue(presenter.presentCategoryNameCalled, "getCategoryName(request:) should ask the presenter to present the category name")
	}
}
